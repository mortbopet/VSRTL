#include "VSRTL/interface/vsrtl_vcdfile.h"

#include <algorithm>
#include <ctime>
#include <iomanip>
#include <sstream>

namespace vsrtl {

std::string vcdSafeString(const std::string &string) {
  auto cp = string;
  std::replace(cp.begin(), cp.end(), ' ', '_');
  return cp;
}

template <typename T>
std::string binStr(T val, unsigned width) {
  std::string s;
  for (unsigned i = 0; i < width; i++) {
    s = ((val & 0b1) ? "1" : "0") + s;
    val >>= 1;
  }
  return s;
}

VCDFile::VCDFile(const std::string &filename) { m_filename = filename; }

void VCDFile::ensureOpen() {
  if (m_file.is_open())
    return;
  m_file.open(m_filename, std::ios_base::trunc);
}

VCDFile::~VCDFile() { m_file.close(); }

void VCDFile::writeLine(const std::string &line) {
  ensureOpen();
  const std::string indent = std::string(m_scopeLevel * 4, ' ');
  m_file << indent << line + "\n";
};

Defer VCDFile::dumpVars() {
  writeLine("$dumpvars");
  for (const auto &it : m_dumpVars) {
    writeVarChange(it.first, it.second);
  }
  return Defer([this] { writeLine("$end"); });
}

Defer VCDFile::writeHeader() {
  writeLine("$version Generated by VSRTL $end");
  auto t = std::time(nullptr);
  auto tm = *std::localtime(&t);
  std::ostringstream oss;
  oss << std::put_time(&tm, "%d-%m-%Y %H-%M-%S");

  writeLine("$date " + oss.str() + " $end");
  writeLine("$timescale 1ns $end");
  return Defer([this] { writeLine("$enddefinitions $end"); });
}

Defer VCDFile::scopeDef(const std::string &name) {
  writeLine("$scope module " + vcdSafeString(name) + " $end");
  m_scopeLevel++;
  return Defer([this] {
    m_scopeLevel--;
    writeLine("$upscope $end");
  });
}

std::string VCDFile::varDef(const std::string &name, unsigned int width) {
  const std::string id = "id" + std::to_string(m_varCntr++);
  writeLine("$var wire " + std::to_string(width) + " " + id + " " +
            vcdSafeString(name) +
            (width > 0 ? "[" + std::to_string(width - 1) + ":0]" : "") +
            " $end");
  m_varWidths[id] = width;
  return id;
}

void VCDFile::writeTime(uint64_t time) {
  writeLine("#" + std::to_string(time));
}

void VCDFile::writeVarChange(const std::string &ref, uint64_t value) {
  std::string valStr;
  const unsigned width = m_varWidths.at(ref);
  if (width == 1) {
    valStr = (static_cast<bool>(value) ? "1" : "0") + ref;
  } else {
    valStr = "b" + binStr(value, width) + " " + ref;
  }

  writeLine(valStr);
}

} // namespace vsrtl
